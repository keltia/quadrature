#!/usr/bin/env ruby

data = File.read('Amdts_spectre_1.txt')


# <Amend>Amendment    <NumAm>74 + +</NumAm>
# <Members>Lena Kolarska-Bobi≈Ñska</Members>
# <DocAmend>Proposal for a decision</DocAmend>
# <Article>Recital 7 </Article>
# 
# Text proposed by the Commission
# Amendment
# (7) Ensuring the optimal use of spectrum may require innovative authorisation solutions such as collective use of spectrum, general authorisations or infrastructure sharing. The application of such principles in the Union might be facilitated by the definition of certain common or converging conditions for spectrum usage. General authorisations, which are the least onerous authorisation system, are of particular interest where interference does not risk hampering the development of other services.
# (7) Ensuring the optimal use of spectrum as a public good may require innovative authorisation solutions such as collective use of spectrum, general authorisations or infrastructure sharing. The application of such principles in the Union might be facilitated by the definition of certain common or converging conditions for spectrum usage. General authorisations, which are the least onerous authorisation system, are of particular interest where interference does not risk hampering the development of other services.
# Or. <Original>{EN}en</Original>
# </Amend>

require 'rubygems'
require 'pp'
require 'nokogiri'
require 'unindent'
require 'erb'
sections = data.scan(%r(<Amend>.+?</Amend>)m)

  
template = ERB.new File.read('template.erb'), nil, '-'

File.open "result.mediawiki", "w" do |f|
  sections.each do |xml|
    doc = Nokogiri::XML(xml)

    num, note = doc.css('NumAm').text.split(' ', 2)
    note.gsub!(/\s/, '') if note
    
    color = case note.to_s.gsub(/[^-+]/, '')
      when "--"
        "red"
      when "-"
        "IndianRed"
      when "++"
        "green"
      when "+"
        "lightgreen"
      when ""
        "lightgrey"
      else
        raise "Invalid note: #{note.inspect}"
    end
    
    infos = xml.scan(%r(Text proposed by the Commission\nAmendment\n(.+)\nOr.)m).first
    raise "No info found" unless infos
    
    
    infos = infos.first.split(/\n/)

    commission_rows = []
    amendement_rows = []
    infos.each_slice(2) do |commission, amendement|
      commission_rows << commission
      amendement_rows << amendement
    end
    
    [commission_rows, amendement_rows].each do |rows|
      rows.delete_if { |row| row.nil? or row.empty? }
    end
    
    members = doc.css('Members').text
    article = doc.css('Article').text

    f.puts template.result(binding)
  end
end
